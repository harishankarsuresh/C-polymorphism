#include <iostream> 
using namespace std;
 
class Shape {
   protected:
      int width, height;
   public:
      Shape( int a=0, int b=0)
      {
         width = a;
         height = b;
      }
      virtual int area()=0;
 /*     {
         cout << "Parent class area :" <<endl;
         return 0;
      }*/
      
};
class Rectangle: public Shape{
   public:
      Rectangle( int a=0, int b=0):Shape(a, b) { }
      int area ()
      { 
         cout << "Rectangle class area :" <<endl;
         return (width * height); 
      }
};
class Triangle: public Shape{
   public:
      Triangle( int a=0, int b=0):Shape(a, b) { }
      int area ()
      { 
         cout << "Triangle class area :" <<endl;
         return (width * height / 2); 
      }
};
// Main function for the program
int main( )
{
   
   Shape *shape;
   //Shape asdf; //ERROR:-cannot declare variable ‘asdf’ to be of abstract type ‘Shape'  
                  //because the following virtual functions are pure within ‘Shape’
   Rectangle rec(10,7);
   Triangle  tri(10,5);

   //shape->area();//core dumped-seg fault

   //shape = &asdf;
   //shape->area();

  // store the address of Rectangle
   shape = &rec;
   // call rectangle area.
   shape->area();

   // store the address of Triangle
   shape = &tri;
   // call triangle area.
   shape->area();



 //  rec.area();
  // tri.area();
   return 0;
}
